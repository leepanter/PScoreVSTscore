mean(acc.pscore.som2.tx),
mean(acc.tradit.som2.tx),
mean(acc.pscore.som3.tx),
mean(acc.tradit.som3.tx))
mean.acc
mean.acc.trad=c(mean(acc.tradit.som1),
mean(acc.tradit.som2),
mean(acc.tradit.som3),
mean(acc.tradit.som1.tx),
mean(acc.tradit.som2.tx),
mean(acc.tradit.som3.tx))
mean.acc.psco=c(mean(acc.pscore.som1),
mean(acc.pscore.som2),
mean(acc.pscore.som3),
mean(acc.pscore.som1.tx),
mean(acc.pscore.som2.tx),
mean(acc.pscore.som3.tx))
mean.acc.trad
mean.acc.psco
acc.df.som2=data.frame(acc.pscore.som2,
acc.tradit.som2,
acc.pscore.som2.tx,
acc.tradit.som2.tx)
save(acc.df.som2, file = "/Users/lee/Desktop/Sup3NEW/accDFsom2.Rdata")
write.csv(acc.df.som2, file = "/Users/lee/Desktop/Sup3NEW/accDFsom2.csv")
ones=rep("PS" , times=sample.length)
twos=rep("TR" , times=sample.length)
thre=rep("PSx", times=sample.length)
four=rep("TRx", times=sample.length)
method=c(ones, twos, thre, four)
method=as.factor(c(ones, twos, thre, four))
method.PS=as.factor(c(ones, ones, twos, twos))
method.X=as.factor(c(ones, twos, thre, four))
method.X=as.factor(c(ones, ones, thre, thre))
method=as.factor(c(ones,twos, thre, four))
acc.df.som2=data.frame(length.train,
acc.pscore.som2,
acc.tradit.som2,
acc.pscore.som2.tx,
acc.tradit.som2.tx)
save(acc.df.som2, file = "/Users/lee/Desktop/Sup3NEW/accDFsom2.Rdata")
write.csv(acc.df.som2, file = "/Users/lee/Desktop/Sup3NEW/accDFsom2.csv")
len.train=rep(length.train, times=4)
acc.som2=c(acc.pscore.som2,
acc.tradit.som2,
acc.pscore.som2.tx,
acc.tradit.som2.tx)
df.som2=data.frame(method, len.train, acc.som2)
lmod.som2=lm(acc.som2~len.train*method, data=df.som2)
(lmods.som2=summary(lmod.som2))
coef.lmod.som2=coef(lmod.som2)
coef.lmod.som2
df.som2=data.frame(method, len.train, acc.som2)
lmod.som2=lm(acc.som2~len.train*method, data=df.som2)
(lmods.som2=summary(lmod.som2))
coef.lmod.som2=coef(lmod.som2)
(coef.int.1=coef.lmod.som2[1])
(coef.int.2=coef.lmod.som2[1]+coef.lmod.som2[3])
(coef.int.3=coef.lmod.som2[1]+coef.lmod.som2[4])
(coef.int.4=coef.lmod.som2[1]+coef.lmod.som2[5])
(coef.slp.1=coef.lmod.som2[2])
(coef.slp.2=coef.lmod.som2[2]+coef.lmod.som2[6])
(coef.slp.3=coef.lmod.som2[2]+coef.lmod.som2[7])
(coef.slp.4=coef.lmod.som2[2]+coef.lmod.som2[8])
p=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_point(aes(y=acc.tradit.som2.tx, color="mediumpurple"))+
geom_abline(intercept = coef.int.1,
slope = coef.int.1,
color = "firebrick")+
geom_abline(intercept = coef.int.2,
slope = coef.int.2,
color = "blue")+
geom_abline(intercept = coef.int.3,
slope = coef.int.3,
color = "hotpink4")+
geom_abline(intercept = coef.int.4,
slope = coef.int.4,
color = "mediumpurple")+
theme(legend.position = "none")
p
p=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_point(aes(y=acc.tradit.som2.tx, color="mediumpurple"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1,
color = "firebrick")+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2,
color = "blue")+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3,
color = "hotpink4")+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4,
color = "mediumpurple")+
theme(legend.position = "none")
p
p=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_point(aes(y=acc.tradit.som2.tx, color="mediumpurple"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
p
pPS=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
theme(legend.position = "none")
pPS
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
(coef.slp.4=coef.lmod.som2[2]+coef.lmod.som2[8])
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
theme(legend.position = "none")
pX
p=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_point(aes(y=acc.tradit.som2.tx, color="mediumpurple"))+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
p
mean(acc.pscore.som2)
mean(acc.tradit.som2)
mean(acc.pscore.som2.tx)
mean(acc.tradit.som2.tx)
pPS=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2, color="hotpink4"))+
# geom_abline(intercept = coef.int.1,
#             slope = coef.slp.1)+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
theme(legend.position = "none")
pPS
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
# geom_abline(intercept = coef.int.2,
#             slope = coef.slp.2)+
geom_abline(intercept = coef.int.1,
slope = coef.slp.1)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
# geom_abline(intercept = coef.int.1,
#             slope = coef.slp.1)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.tradit.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.2,
slope = coef.slp.2)+
# geom_abline(intercept = coef.int.1,
#             slope = coef.slp.1)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.pscore.som2, color="firebrick"))+
geom_point(aes(y=acc.pscore.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
# geom_abline(intercept = coef.int.1,
#             slope = coef.slp.1)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.tradit.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
# geom_abline(intercept = coef.int.1,
#             slope = coef.slp.1)+
theme(legend.position = "none")
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.tradit.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2.tx, color="blue"))+
geom_abline(intercept = coef.int.3,
slope = coef.slp.3)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
# geom_abline(intercept = coef.int.3,
#             slope = coef.slp.3)+
pX
pX=ggplot(acc.df.som2, aes(x=length.train))+
geom_point(aes(y=acc.tradit.som2, color="firebrick"))+
geom_point(aes(y=acc.tradit.som2.tx, color="blue"))+
# geom_abline(intercept = coef.int.3,
#             slope = coef.slp.3)+
geom_abline(intercept = coef.int.4,
slope = coef.slp.4)+
theme(legend.position = "none")
pX
(lmods.som2=summary(lmod.som2))
- \textbf{Table XX:}
\begin{center}
\begin{tabular}{|c|c|c|c|c|}
\hline
Parameter     & Estimate  & Std. Error & t. Value  & Pr(>|t|) \\
\hline
\hline
Intercept    &  6.227e-1 &  2.814e-2  &  2.213e1  & <2e-16   \\
\hline
ID = $\left(\text{Pscore}, \ L^{1}  \right)$               & -9.234e-2 &  3.979e-2  & -2.321e0  & 2.136e-2 \\
\hline
ID = $\left(\text{Trad}, \ L^{2}   \right)$               & 1.102e-1 &  3.979e-2  & 2.769e0  & 6.170e-3 \\
\hline
ID = $\left(\text{Trad}, \ L^{1}   \right)$               & 2.841e-2 &  3.979e-2  & 7.140e-1  & 4.762e-1 \\
\hline
\#Train Obs  &  1.781e-5 &  1.60e-5  &  1.535e0  & 1.264e-1 \\
\hline
ID = $\left(\text{Pscore}, \ L^{1}  \right)$:(\#Train Obs) &  2.390e-6 &  1.640e-5  &  1.460e-1 & 8.843e-1 \\
\hline
ID = $\left(\text{Trad}, \ L^{2}   \right)$:(\#Train Obs) &  -1.557e-5 &  1.640e-5  &  -9.490e-1 & 3.437e-1 \\
\hline
ID = $\left(\text{Trad}, \ L^{1}   \right)$:(\#Train Obs) &  -1.593e-5 &  1.640e-5  &  -9.710e0 & 3.329e-1 \\
\hline
\end{tabular}
\end{center}
\textbf{Table 1 Caption:} summary table for linear regrssion trend lines fit to accuracy estimate values displayed in \textbf{Figure XX}
####  Install Packages
install.packages("factoextra")
# Imports PHQ9 Data Subst from original data set
WD="/Users/lee/Documents/GitHub/PScoreVSTscore"
setwd(WD)
####	Libraries and Prelims	 ####
set.seed(123)
phq9=read.csv(file = "/Code/PHQ9subset.csv")
# Imports PHQ9 Data Subst from original data set
WD="/Users/lee/Documents/GitHub/PScoreVSTscore"
setwd(WD)
phq9=read.csv(file = "/Code/PHQ9subset.csv")
phq9=read.csv(file = "Code/PHQ9subset.csv")
# phq9DataSubsetImport.R
phq9=read.csv(file = "Code/PHQ9subset.csv")
dat.in=phq9
dat.in=dat.in[,2:32]
dat.in=dat.in[,-c(3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21)]
dat.in=dat.in[,-13]
colnames(dat.in)[3:12]=c("qTot", "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9")
dat.in$Q1=dat.in$Q1-1
dat.in$Q2=dat.in$Q2-1
dat.in$Q3=dat.in$Q3-1
dat.in$Q4=dat.in$Q4-1
dat.in$Q5=dat.in$Q5-1
dat.in$Q6=dat.in$Q6-1
dat.in$Q7=dat.in$Q7-1
dat.in$Q8=dat.in$Q8-1
dat.in$Q9=dat.in$Q9-1
resp.list=list()
for(i in 1:2495){
resp.list[[i]]=c(dat.in$Q1[i],
dat.in$Q2[i],
dat.in$Q3[i],
dat.in$Q4[i],
dat.in$Q5[i],
dat.in$Q6[i],
dat.in$Q7[i],
dat.in$Q8[i],
dat.in$Q9[i])
}
Qnum=c(1,2,3,4,5,6,7,8,9)
Qstring=c("Q1","Q2","Q3","Q4","Q5","Q6","Q7","Q8","Q9")
Anum=c(0,1,2,3)
Astring=c("0", "1", "2", "3")
tot.vec=c()
for(i in 1:2495){
tot.vec[i]=sum(unlist(resp.list[[i]]))
}
dat.in$qTot=tot.vec
ClassString=c("C1", "C2", "C3")
ClassNum=c(1,2,3)
dat.in$sumClassString=NA_character_
dat.in$sumClassNum=NA_integer_
dat.in[which(dat.in$qTot < 7),13]=ClassString[1]
dat.in[which(dat.in$qTot < 7),14]=ClassNum[1]
dat.in[which(7 <= dat.in$qTot & dat.in$qTot < 10),13] = ClassString[2]
dat.in[which(7 <= dat.in$qTot & dat.in$qTot < 10),14] = ClassNum[2]
dat.in[which(10 <= dat.in$qTot),13]=ClassString[3]
dat.in[which(10 <= dat.in$qTot),14]=ClassNum[3]
sum.val=c(5,6,7,8,9,10,11,12)
perc.index.val=c(round( length(which(dat.in$qTot==5))/2495,digits=4),
round( length(which(dat.in$qTot==6))/2495,digits=4),
round( length(which(dat.in$qTot==7))/2495,digits=4),
round( length(which(dat.in$qTot==8))/2495,digits=4),
round( length(which(dat.in$qTot==9))/2495,digits=4),
round(length(which(dat.in$qTot==10))/2495,digits=4),
round(length(which(dat.in$qTot==11))/2495,digits=4),
round(length(which(dat.in$qTot==12))/2495,digits=4))
perm.vals=data.frame(sum.val, perc.index.val)
sample.perc=c()
sample.perc[1]=perm.vals$perc.index.val[1]/4
sample.perc[2]=perm.vals$perc.index.val[2]/3
sample.perc[3]=perm.vals$perc.index.val[3]/2
sample.perc[4]=perm.vals$perc.index.val[4]/3
sample.perc[5]=perm.vals$perc.index.val[5]/3
sample.perc[6]=perm.vals$perc.index.val[6]/2
sample.perc[7]=perm.vals$perc.index.val[7]/3
sample.perc[8]=perm.vals$perc.index.val[8]/4
perm.vals$sample.perc= round(sample.perc, digits = 4)
n.obs=c()
n.obs[1]=length(which(dat.in$qTot==5))
n.obs[2]=length(which(dat.in$qTot==6))
n.obs[3]=length(which(dat.in$qTot==7))
n.obs[4]=length(which(dat.in$qTot==8))
n.obs[5]=length(which(dat.in$qTot==9))
n.obs[6]=length(which(dat.in$qTot==10))
n.obs[7]=length(which(dat.in$qTot==11))
n.obs[8]=length(which(dat.in$qTot==12))
perm.vals$n.obs=n.obs
View(perm.vals)
####	MasterCVanalysis.R	 ####
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will combine the constituent functions, data, and variables needed in order to perform a cross-validation examination of Probabilistic Scoring.
####	Script Dependencies	 ####
# Data Dependencies:
# PHQ9 Data
source(file = "Code/phq9DataSubsetImport.R")
## File Dependencies
# CVInitialSetup.R
source(file = "Code/CVInitialSetups.R")
## functions:
# Weight Calculations
source(file = "Code/functionsWeightCalculations.R")
# Probabilistic Score Calculations
source(file = "Code/functionsProbScoreCalc.R")
# Scoring Analysis
source(file="Code/functionsScoringAnalysis.R")
####	MasterCVanalysis.R	 ####
#-------------------------------------------------------------------------#
####	Description:	 ####
# This script will combine the constituent functions, data, and variables needed in order to perform a cross-validation examination of Probabilistic Scoring.
####	Script Dependencies	 ####
# Data Dependencies:
# PHQ9 Data
source(file = "Code/phq9DataSubsetImport.R")
## File Dependencies
# CVInitialSetup.R
source(file = "Code/CVInitialSetups.R")
## functions:
# Weight Calculations
source(file = "Code/functionsWeightCalculations.R")
# Probabilistic Score Calculations
source(file = "Code/functionsProbScoreCalc.R")
# Scoring Analysis
source(file="Code/functionsScoringAnalysis.R")
dat=phq9
str(dat)
diff.index=which(dat$sumClassString != dat$SupOutString)
diff.df=dat[diff.index,]
library(dplyr)
diff.df$qTotFactor=as.factor(diff.df$qTot)
str(dat)
str(diff.df)
summary.diff= diff.df %>% group_by(diff.df$qTotFactor) %>% tally()
View(summary.diff)
dat$qTotFactor=as.factor(dat$qTot)
summary.dat=dat %>% group_by(dat$qTotFactor) %>% tally()
summary.dat
summary.dat[6:14,]
summary.dat[6:13,]
View(summary.dat)
flips=rep(0, times=28)
summary.dat$flips=flips
View(summary.diff)
flips[6:13]=summary.diff$n
summary.dat$flips=flips
View(summary.dat)
library(ggplot2)
colnames(summary.dat)=c("Sum", "TotalObs", "Flips")
p=ggplot(summary.dat, aes(x=Sum))+
geom_point(aes(y=TotalObs))+
geom_point(aes(y=Flips, color="red"))
p
p=ggplot(summary.dat, aes(x=Sum))+
geom_point(aes(y=TotalObs))+
geom_point(aes(y=Flips, color="red"))+
geom_hline(yintercept = 0)+
geom_vline(xintercept = 0)+
geom_vline(xintercept = 7)+
geom_vline(xintercept = 10)
p
p=ggplot(summary.dat, aes(x=Sum))+
geom_point(aes(y=TotalObs))+
geom_point(aes(y=Flips, color="red"))+
geom_hline(yintercept = 0)+
geom_vline(xintercept = 0)+
geom_vline(xintercept = 7)+
geom_vline(xintercept = 10)+
theme(legend.position = "none")
p
p=ggplot(summary.dat, aes(x=Sum))+
geom_point(aes(y=TotalObs))+
geom_point(aes(y=Flips, color="red"))+
geom_hline(yintercept = 0)+
geom_vline(xintercept = 1)+
geom_vline(xintercept = 8)+
geom_vline(xintercept = 11)+
theme(legend.position = "none")
p
View(summary.dat)
dualflips=subset(summary.dat, Sum==8 | Sum==9)
View(dualflips)
View(diff.df)
dualflips=subset(diff.df,qTot==8 | qTot=9)
dualflips=subset(diff.df,qTot==8 | qTot==9)
duf.8.1=dualflips[which(dualflips$sumClassString=="C1")]
duf.8.1=dualflips[which(dualflips$sumClassString=="C1"),]
duf.8.1=dualflips[which(dualflips$sumClassString=="C3"),]
duf.8.3=dualflips[which(dualflips$sumClass==3),]
View(dualflips)
duf.8.3=dualflips[which(dualflips$SupOutNum==3),]
duf.8.1=dualflips[which(dualflips$SupOutNum==1),]
dualflips.8=subset(diff.df,qTot==8)
duf.8.1=dualflips[which(dualflips.8$SupOutNum==1),] #35
duf.8.3=dualflips[which(dualflips.8$SupOutNum==3),] #42
dualflips.9=subset(diff.df,qTot==9)
dualflips.8=subset(diff.df,qTot==8)
duf.8.1=dualflips.9[which(dualflips.8$SupOutNum==1),] #19
duf.8.3=dualflips.9[which(dualflips.8$SupOutNum==3),] #21
dualflips.9=subset(diff.df,qTot==9)
duf.9.1=dualflips[which(dualflips.9$SupOutNum==1),] #19
duf.9.3=dualflips[which(dualflips.9$SupOutNum==3),] #21
summary.diff
summary.dat$flips=flips
View(dat)
dat$qTotFactor=as.factor(dat$qTot)
summary.dat=dat %>% group_by(dat$qTotFactor) %>% tally()
summary.dat[6:13,]
